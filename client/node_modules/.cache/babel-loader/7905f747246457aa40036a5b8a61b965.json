{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst API_KEY = process.env.REACT_APP_FIREBASE_API_KEY;\nconst AUTH_DOMAIN = process.env.REACT_APP_FIREBASE_AUTH_DOMAIN;\nconst DATABASE_URL = process.env.REACT_APP_FIREBASE_DATABASE_URL;\nconst PROJECT_ID = process.env.REACT_APP_FIREBASE_PROJECT_ID;\nconst STORAGE_BUCKET = process.env.REACT_APP_FIREBASE_STORAGE_BUCKET;\nconst MESSAGE_SENDER_ID = process.env.REACT_APP_FIREBASE_MESSAGE_SENDER_ID;\nconst APP_ID = process.env.REACT_APP_FIREBASE_APP_ID;\nconst MEASUREMENT_ID = process.env.REACT_APP_FIREBASE_MEASUREMENT_ID;\nconst config = {\n  apiKey: API_KEY,\n  authDomain: AUTH_DOMAIN,\n  databaseURL: DATABASE_URL,\n  projectId: PROJECT_ID,\n  storageBucket: STORAGE_BUCKET,\n  messagingSenderId: MESSAGE_SENDER_ID,\n  appId: APP_ID,\n  measurementId: MEASUREMENT_ID\n};\nfirebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get(); // for training:\n  // const collectionRef = firestore.collection('users');\n  // const collectionSnapshot = await collectionRef.get();\n  // console.log({collection: collectionSnapshot.docs.map(doc=>doc.data())});\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error createing user', error.message);\n    }\n  }\n\n  return userRef;\n}; //this function is to turn the array we get from the firebase and transform  it in an object\n\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedColelction = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      //JS method where you pass a string and gives you back a string that a url can be read\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedColelction.reduce((acc, collection) => {\n    acc[collection.title.toLowerCase()] = collection;\n    return acc;\n  }, {});\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc(); //if we pass sth inside doc it will set as the key, if we leave empty firefox will automatically generate a key\n\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googlePovider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/Manuel Rocha/Documents/Coding C/Udemy/ReactDev-Redux-Hooks-GraphQL/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","API_KEY","process","env","REACT_APP_FIREBASE_API_KEY","AUTH_DOMAIN","REACT_APP_FIREBASE_AUTH_DOMAIN","DATABASE_URL","REACT_APP_FIREBASE_DATABASE_URL","PROJECT_ID","REACT_APP_FIREBASE_PROJECT_ID","STORAGE_BUCKET","REACT_APP_FIREBASE_STORAGE_BUCKET","MESSAGE_SENDER_ID","REACT_APP_FIREBASE_MESSAGE_SENDER_ID","APP_ID","REACT_APP_FIREBASE_APP_ID","MEASUREMENT_ID","REACT_APP_FIREBASE_MEASUREMENT_ID","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","convertCollectionsSnapshotToMap","collections","transformedColelction","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","acc","collection","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","batch","forEach","obj","newDocRef","commit","auth","googlePovider","GoogleAuthProvider","provider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst API_KEY = process.env.REACT_APP_FIREBASE_API_KEY;\r\nconst AUTH_DOMAIN = process.env.REACT_APP_FIREBASE_AUTH_DOMAIN;\r\nconst DATABASE_URL = process.env.REACT_APP_FIREBASE_DATABASE_URL;\r\nconst PROJECT_ID = process.env.REACT_APP_FIREBASE_PROJECT_ID;\r\nconst STORAGE_BUCKET = process.env.REACT_APP_FIREBASE_STORAGE_BUCKET;\r\nconst MESSAGE_SENDER_ID = process.env.REACT_APP_FIREBASE_MESSAGE_SENDER_ID;\r\nconst APP_ID = process.env.REACT_APP_FIREBASE_APP_ID;\r\nconst MEASUREMENT_ID = process.env.REACT_APP_FIREBASE_MEASUREMENT_ID;\r\n\r\nconst config = {\r\n  apiKey: API_KEY,\r\n  authDomain: AUTH_DOMAIN,\r\n  databaseURL: DATABASE_URL,\r\n  projectId: PROJECT_ID,\r\n  storageBucket: STORAGE_BUCKET,\r\n  messagingSenderId: MESSAGE_SENDER_ID,\r\n  appId: APP_ID,\r\n  measurementId: MEASUREMENT_ID,\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n  if (!userAuth) return;\r\n\r\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n  const snapShot = await userRef.get();\r\n\r\n  // for training:\r\n  // const collectionRef = firestore.collection('users');\r\n  // const collectionSnapshot = await collectionRef.get();\r\n  // console.log({collection: collectionSnapshot.docs.map(doc=>doc.data())});\r\n\r\n  if (!snapShot.exists) {\r\n    const { displayName, email } = userAuth;\r\n    const createdAt = new Date();\r\n\r\n    try {\r\n      await userRef.set({\r\n        displayName,\r\n        email,\r\n        createdAt,\r\n        ...additionalData,\r\n      });\r\n    } catch (error) {\r\n      console.log('error createing user', error.message);\r\n    }\r\n  }\r\n  return userRef;\r\n};\r\n\r\n//this function is to turn the array we get from the firebase and transform  it in an object\r\nexport const convertCollectionsSnapshotToMap = (collections) => {\r\n  const transformedColelction = collections.docs.map((doc) => {\r\n    const { title, items } = doc.data();\r\n\r\n    return {\r\n      routeName: encodeURI(title.toLowerCase()), //JS method where you pass a string and gives you back a string that a url can be read\r\n      id: doc.id,\r\n      title,\r\n      items,\r\n    };\r\n  });\r\n\r\n  return transformedColelction.reduce((acc, collection) => {\r\n    acc[collection.title.toLowerCase()] = collection;\r\n    return acc;\r\n  }, {});\r\n};\r\n\r\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\r\n  const collectionRef = firestore.collection(collectionKey);\r\n\r\n  const batch = firestore.batch();\r\n  objectsToAdd.forEach((obj) => {\r\n    const newDocRef = collectionRef.doc(); //if we pass sth inside doc it will set as the key, if we leave empty firefox will automatically generate a key\r\n    batch.set(newDocRef, obj);\r\n  });\r\n\r\n  return await batch.commit();\r\n};\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nexport const googlePovider = new firebase.auth.GoogleAuthProvider();\r\nprovider.setCustomParameters({ prompt: 'select_account' });\r\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\nexport default firebase;\r\n"]},"metadata":{},"sourceType":"module"}