{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Manuel Rocha\\\\Documents\\\\Coding C\\\\Udemy\\\\ReactDev-Redux-Hooks-GraphQL\\\\crwn-clothing\\\\src\\\\components\\\\cart-dropdown\\\\cart-dropdown.component.jsx\";\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport CartItem from '../cart-item/cart-item.component';\nimport { selectCartItems } from '../../redux/cart/cart.selectors';\nimport { toggleCartHidden } from '../../redux/cart/cart.actions';\nimport { CartDropdownContainer, CartDropdownButton, CartItemsStyles, EmptyMessageStyles } from './cart-dropdown.styles';\n\nconst CartDropdown = ({\n  cartItems,\n  history,\n  dispatch\n}) => /*#__PURE__*/React.createElement(CartDropdownContainer, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(CartItemsStyles, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }\n}, cartItems.length ? cartItems.map(cartItem => /*#__PURE__*/React.createElement(CartItem, {\n  key: cartItem.id,\n  item: cartItem,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 37\n  }\n})) : /*#__PURE__*/React.createElement(EmptyMessageStyles, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }\n}, \"Your cart is empty\")), /*#__PURE__*/React.createElement(CartDropdownButton, {\n  onClick: () => {\n    dispatch(toggleCartHidden());\n    history.push('/checkout');\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }\n}, \"GO TO CHECKOUT\"));\n\nconst mapStateToProps = createStructuredSelector({\n  cartItems: selectCartItems\n}); //when we don't pass the second argument to connect, the dispatch is passed to props\n//the idea is to avoid verbose. you can check the property by replacing dispatch with props and console.log(props)\n\nexport default withRouter(connect(mapStateToProps)(CartDropdown));","map":{"version":3,"sources":["C:/Users/Manuel Rocha/Documents/Coding C/Udemy/ReactDev-Redux-Hooks-GraphQL/crwn-clothing/src/components/cart-dropdown/cart-dropdown.component.jsx"],"names":["React","withRouter","connect","createStructuredSelector","CartItem","selectCartItems","toggleCartHidden","CartDropdownContainer","CartDropdownButton","CartItemsStyles","EmptyMessageStyles","CartDropdown","cartItems","history","dispatch","length","map","cartItem","id","push","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AAGA,OAAOC,QAAP,MAAqB,kCAArB;AACA,SAASC,eAAT,QAAgC,iCAAhC;AACA,SAASC,gBAAT,QAAiC,+BAAjC;AAEA,SACEC,qBADF,EAEEC,kBAFF,EAGEC,eAHF,EAIEC,kBAJF,QAKO,wBALP;;AAOA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,OAAb;AAAsBC,EAAAA;AAAtB,CAAD,kBACnB,oBAAC,qBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACGF,SAAS,CAACG,MAAV,GACCH,SAAS,CAACI,GAAV,CAAeC,QAAD,iBAAc,oBAAC,QAAD;AAAU,EAAA,GAAG,EAAEA,QAAQ,CAACC,EAAxB;AAA4B,EAAA,IAAI,EAAED,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAA5B,CADD,gBAGC,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAJJ,CADF,eAQE,oBAAC,kBAAD;AACE,EAAA,OAAO,EAAE,MAAM;AACbH,IAAAA,QAAQ,CAACR,gBAAgB,EAAjB,CAAR;AACAO,IAAAA,OAAO,CAACM,IAAR,CAAa,WAAb;AACD,GAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBARF,CADF;;AAoBA,MAAMC,eAAe,GAAGjB,wBAAwB,CAAC;AAC/CS,EAAAA,SAAS,EAAEP;AADoC,CAAD,CAAhD,C,CAIA;AACA;;AACA,eAAeJ,UAAU,CAACC,OAAO,CAACkB,eAAD,CAAP,CAAyBT,YAAzB,CAAD,CAAzB","sourcesContent":["import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\n\r\nimport CartItem from '../cart-item/cart-item.component';\r\nimport { selectCartItems } from '../../redux/cart/cart.selectors';\r\nimport { toggleCartHidden } from '../../redux/cart/cart.actions';\r\n\r\nimport {\r\n  CartDropdownContainer,\r\n  CartDropdownButton,\r\n  CartItemsStyles,\r\n  EmptyMessageStyles,\r\n} from './cart-dropdown.styles';\r\n\r\nconst CartDropdown = ({ cartItems, history, dispatch }) => (\r\n  <CartDropdownContainer>\r\n    <CartItemsStyles>\r\n      {cartItems.length ? (\r\n        cartItems.map((cartItem) => <CartItem key={cartItem.id} item={cartItem} />)\r\n      ) : (\r\n        <EmptyMessageStyles>Your cart is empty</EmptyMessageStyles>\r\n      )}\r\n    </CartItemsStyles>\r\n    <CartDropdownButton\r\n      onClick={() => {\r\n        dispatch(toggleCartHidden());\r\n        history.push('/checkout');\r\n      }}\r\n    >\r\n      GO TO CHECKOUT\r\n    </CartDropdownButton>\r\n  </CartDropdownContainer>\r\n);\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  cartItems: selectCartItems,\r\n});\r\n\r\n//when we don't pass the second argument to connect, the dispatch is passed to props\r\n//the idea is to avoid verbose. you can check the property by replacing dispatch with props and console.log(props)\r\nexport default withRouter(connect(mapStateToProps)(CartDropdown));\r\n"]},"metadata":{},"sourceType":"module"}