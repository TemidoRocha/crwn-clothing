{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Manuel Rocha\\\\Documents\\\\Coding C\\\\Udemy\\\\ReactDev-Redux-Hooks-GraphQL\\\\crwn-clothing\\\\src\\\\components\\\\cart-icon\\\\cart-icon.component.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { toggleCartHidden } from '../../redux/cart/cart.actions';\nimport { selectCartItemsCount } from '../../redux/cart/cart.selectors';\nimport { CartIconContainer, ShoppingIconStyles, ItemCountStyles } from './cart-icon.styles';\n\nconst CartIcon = ({\n  toggleCartHidden,\n  itemCount\n}) => /*#__PURE__*/React.createElement(CartIconContainer, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(ShoppingIcon, {\n  onClick: toggleCartHidden,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }\n}), /*#__PURE__*/React.createElement(\"span\", {\n  className: \"item-count\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }\n}, itemCount));\n\nconst mapDispatchToProps = dispatch => ({\n  toggleCartHidden: () => dispatch(toggleCartHidden())\n}); //like this, the following function will force our component to rerender everytime teh state is updated, because it doesn't know if the itemCount is the same as the previous.\n\n\nconst mapStateToProps = createStructuredSelector({\n  itemCount: selectCartItemsCount\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(CartIcon);","map":{"version":3,"sources":["C:/Users/Manuel Rocha/Documents/Coding C/Udemy/ReactDev-Redux-Hooks-GraphQL/crwn-clothing/src/components/cart-icon/cart-icon.component.jsx"],"names":["React","connect","createStructuredSelector","toggleCartHidden","selectCartItemsCount","CartIconContainer","ShoppingIconStyles","ItemCountStyles","CartIcon","itemCount","mapDispatchToProps","dispatch","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AAEA,SAASC,gBAAT,QAAiC,+BAAjC;AACA,SAASC,oBAAT,QAAqC,iCAArC;AAEA,SAAQC,iBAAR,EAA2BC,kBAA3B,EAA+CC,eAA/C,QAAqE,oBAArE;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEL,EAAAA,gBAAF;AAAoBM,EAAAA;AAApB,CAAD,kBACf,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,YAAD;AAAc,EAAA,OAAO,EAAEN,gBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,eAEE;AAAM,EAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA8BM,SAA9B,CAFF,CADF;;AAOA,MAAMC,kBAAkB,GAAIC,QAAD,KAAe;AACxCR,EAAAA,gBAAgB,EAAE,MAAMQ,QAAQ,CAACR,gBAAgB,EAAjB;AADQ,CAAf,CAA3B,C,CAIA;;;AACA,MAAMS,eAAe,GAAGV,wBAAwB,CAAC;AAC/CO,EAAAA,SAAS,EAAEL;AADoC,CAAD,CAAhD;AAIA,eAAeH,OAAO,CAACW,eAAD,EAAkBF,kBAAlB,CAAP,CAA6CF,QAA7C,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\nimport { toggleCartHidden } from '../../redux/cart/cart.actions';\r\nimport { selectCartItemsCount } from '../../redux/cart/cart.selectors';\r\n\r\nimport {CartIconContainer, ShoppingIconStyles, ItemCountStyles} from './cart-icon.styles'\r\n\r\nconst CartIcon = ({ toggleCartHidden, itemCount }) => (\r\n  <CartIconContainer>\r\n    <ShoppingIcon onClick={toggleCartHidden} />\r\n    <span className=\"item-count\">{itemCount}</span>\r\n  </CartIconContainer>\r\n);\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  toggleCartHidden: () => dispatch(toggleCartHidden()),\r\n});\r\n\r\n//like this, the following function will force our component to rerender everytime teh state is updated, because it doesn't know if the itemCount is the same as the previous.\r\nconst mapStateToProps = createStructuredSelector({\r\n  itemCount: selectCartItemsCount,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CartIcon);\r\n"]},"metadata":{},"sourceType":"module"}